import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.Duration;
import java.util.LinkedList;
import java.util.Queue;



public class IndividualStream {

private Channel channelOne;
private Channel channelTwo;

//private TimingRecord[] _stream;
private LocalDateTime _start;
private int _currentRecord;
private int _capacity;
private int runNumber;
private compType competition;
private Queue<TimingRecord> runs;
boolean channelOneOn = false;
boolean channelTwoOn = false;

//commented out fields, set runs aka (timing records) to only one 1 so far.
public IndividualStream()	
{
	channelOne = new Channel();
	channelTwo = new Channel();
	
	//channelOne.disarm();
	//channelTwo.disarm();
	this.competition = compType.IND;
	this.runNumber = 1;
	runs = new LinkedList<TimingRecord>();
	
	//_start = LocalDateTime.now();
	
	/*_stream=new TimingRecord[numRunners];
	for(int i=0; i<numRunners; ++i){
		_stream[i] = new TimingRecord();
	}*/
	_currentRecord=0;
	//_capacity=numRunners;
	//_capacity = 0;
}

public void CancelRecord(){
	//_stream[_currentRecord].cancel();
	//System.out.println(_stream[_currentRecord].toString());
	runs.peek().cancel();
	System.out.println(runs.poll().toString());
	_currentRecord++;
	System.out.println("Next Racer");
}

public void startRecord()
{
	//_stream[_currentRecord].start();
	//System.out.println(_stream[_currentRecord].toString());
	channelOne.arm();
	runs.add(new TimingRecord());
	runs.peek().start(channelOne.trigger());
	System.out.println(runs.peek().toString());
	System.out.println("SIZE: " + runs.size());
}

public void finishRecord(){
	//_stream[_currentRecord].finish();
	//System.out.println(_stream[_currentRecord].toString());
	channelTwo.arm();
	runs.peek().finish(channelTwo.trigger());
	System.out.println(runs.poll().toString());
	//_currentRecord++;
	System.out.println("Next Racer");
	System.out.println("SIZE: " + runs.size());

	
}

public void DNFRecord(){
	/*_stream[_currentRecord].DNF();
	System.out.println(_stream[_currentRecord].toString());*/
	runs.peek().DNF();
	System.out.println(runs.poll().toString());
	_currentRecord++;
	System.out.println("Next Racer");
}

/*
public TimingRecord[] get_stream(){
	return _stream;
}*/


public void turnChannelOn(int channelNum){
	if(channelNum == 1){
		channelOne.arm();
	}else if(channelNum == 2){
		channelTwo.arm();
	}else{
		System.out.println("Sorry cannot turn on that channel: " + channelNum);
	}
}

public void turnChannelOff(int channelNum){
	if(channelNum == 1){
		channelOne.disarm();
	}else if(channelNum == 2){
		channelTwo.disarm();
	}else{
		System.out.println("Sorry cannot turn off that channel: " + channelNum);
	}
}

public void toggle(int channelNum){
	if(channelNum == 1){
		channelOne.toggle();
	}else if(channelNum == 2){
		channelTwo.toggle();
	}else{
		System.out.println("Sorry cannot turn off that channel: " + channelNum);
	}
}

}
